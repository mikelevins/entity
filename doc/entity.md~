# entity

Simple and extensible entities. An `entity` is a bundle of slots, where a slot is key/value pair.

Many representations are possible for such an object; entity does not specify any particular one. Instead, it defines an abstract `entity` class and an interface of generic functions that can be specialized for any suitable representation.

A simple default representation is provided, 'alist-entity`. As its name suggests, `alist-entity` represents an entity as an association list.

## Reference

### Packages

`entity` [*Package*]
The package in which all entity types and procedures are defined.

### Special variables

`*default-entity-class-name*` [*Special variable*]
The name of the default class of entities instantiated by calling entity constructors. You can assign or rebind a class name to this variable in order to change the class of new entities created by the constructors. Alternatively, you can explicitly pass class names to the contructors to instantiate specific classes.

The default value of this variable is `alist-entity`.

### Classes

`entity` [*Class*]
The abstract superclass of all entity classes.

### Generic functions

`contains-key? (` *`entity`* *`key`* `&key` *`key-test`*`))`

`get-key` (entity key &key default key-test))
`set-key!` (entity key val &key key-test))
`add-key` (entity key val &key key-test))
`add-key!` (entity key val &key key-test))
`ensure-key` (entity key val &key key-test))
`ensure-key!` (entity key val &key key-test))
`remove-key` (entity key &key key-test))
`remove-key!` (entity key &key key-test))
`keys` (entity))
`vals` (entity))
`map-keys` (procedure entity))
`merge-keys` (entity1 entity2 &key key-test resolve-collision))
